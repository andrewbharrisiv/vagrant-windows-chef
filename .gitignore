# =============================================================================
# Pattern Format Guidelines
#  - A blank line matches no files, so it can serve as a separator for
#    readability.
#  - A line starting with # serves as a comment. Put a backslash ("\") in front
#    of the first hash for patterns that begin with a hash.
#  - An optional prefix "!" which negates the pattern; any matching file
#    excluded by a previous pattern will become included again. If a negated
#    pattern matches, this will override lower precedence patterns sources. Put
#    a backslash ("\") in front of the first "!" for patterns that begin with a
#    literal "!", for example, "\!important!.txt".
#  - If the pattern ends with a slash, it is removed for the purpose of the
#    following description, but it would only find a match with a directory. In
#    other words, foo/ will match a directory foo and paths underneath it, but
#    will not match a regular file or a symbolic link foo (this is consistent
#    with the way how pathspec works in general in git).
#  - If the pattern does not contain a slash /, git treats it as a shell glob
#    pattern and checks for a match against the pathname relative to the
#    location of the .gitignore file (relative to the toplevel of the work tree
#    if not from a .gitignore file).
#  - Otherwise, git treats the pattern as a shell glob suitable for consumption
#    by fnmatch(3) with the FNM_PATHNAME flag: wildcards in the pattern will
#    not match a / in the pathname. For example, "Documentation/*.html" matches
#    "Documentation/git.html" but not "Documentation/ppc/ppc.html" or
#    "tools/perf/Documentation/perf.html".
#  - A leading slash matches the beginning of the pathname. For example, "/*.c"
#    matches "cat-file.c" but not "mozilla-sha1/sha1.c".
# =============================================================================

# =============================================================================
# --- Operating System Ignores ---
# =============================================================================
# ===============
# Linux.gitignore
# ===============
*~

# KDE directory preferences
.directory

# =============
# OSX.gitignore
# =============
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear on external disk
.Spotlight-V100
.Trashes

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# =================
# Windows.gitignore
# =================
# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# =============================================================================
# --- Editor Ignores ---
# =============================================================================
# ===================
# Jetbrains.gitignore
# ===================
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm

## Directory-based project format
.idea/
# if you remove the above rule, at least ignore user-specific stuff:
# .idea/workspace.xml
# .idea/tasks.xml
# and these sensitive or high-churn files:
# .idea/dataSources.ids
# .idea/dataSources.xml
# .idea/sqlDataSources.xml
# .idea/dynamic.xml

## File-based project format
*.ipr
*.iws
*.iml

## Additional for IntelliJ
out/

# generated by mpeltonen/sbt-idea plugin
.idea_modules/

# generated by JIRA plugin
atlassian-ide-plugin.xml

# generated by Crashlytics plugin (for Android Studio and Intellij)
com_crashlytics_export_strings.xml

# =============================================================================
# NotepadPP.gitignore
# =============================================================================
# Notepad++ backups #
*.bak

# =============================================================================
# SublimeText.gitignore
# =============================================================================
# workspace files are user-specific
*.sublime-workspace

# project files should be checked into the repository, unless a significant
# proportion of contributors will probably not be using SublimeText
# *.sublime-project

#sftp configuration file
sftp-config.json

# =============================================================================
# vim.gitignore
# =============================================================================
[._]*.s[a-w][a-z]
[._]s[a-w][a-z]
*.un~
Session.vim
.netrwhist
*~

# ======================
# VisualStudio.gitignore
# ======================
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.

# User-specific files
*.suo
*.user
*.sln.docstates

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
x64/
#build/
bld/
[Bb]in/
[Oo]bj/

# Roslyn cache directories
*.ide/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

#NUNIT
*.VisualState.xml
TestResult.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

*_i.c
*_p.c
*_i.h
*.ilk
*.meta
*.obj
*.pch
*.pdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opensdf
*.sdf
*.cachefile

# Visual Studio profiler
*.psess
*.vsp
*.vspx

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# JustCode is a .NET coding addin-in
.JustCode

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# NCrunch
_NCrunch_*
.*crunch*.local.xml

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
## TODO: Comment the next line if you want to checkin your
## web deploy settings but do note that will include unencrypted
## passwords
*.pubxml

# NuGet Packages Directory
packages/*
## TODO: If the tool you use requires repositories.config
## uncomment the next line
!packages/repositories.config

# Enable "build/" folder in the NuGet Packages folder since
# NuGet packages use it for MSBuild targets.
# This line needs to be after the ignore of the build folder
# (and the packages folder if the line above has been uncommented)
#!packages/build/

# Windows Azure Build Output
csx/
*.build.csdef

# Windows Store app package directory
AppPackages/

# Others
sql/
*.Cache
ClientBin/
[Ss]tyle[Cc]op.*
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.pfx
*.publishsettings
node_modules/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm

# SQL Server files
*.mdf
*.ldf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings

# Microsoft Fakes
FakesAssemblies/

# =============================================================================
# --- Other Artifact Ignores ---
# =============================================================================
# =================
# Vagrant.gitignore
# =================
.vagrant/

# ================
# Common artifacts
# ================
_notes/
*.bak
*.bak.*
*.old
*.old.*

# =============================================================================
# --- Repository Specific Ignores ---
# =============================================================================
vagrant/chef/cookbooks/**/*
!vagrant/chef/cookbooks/Readme.md
vagrant/chef/tmp/**/*
!vagrant/chef/tmp/Readme.md
vagrant/chef/Cheffile.lock

